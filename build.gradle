plugins {
    id 'java'
    id 'maven-publish'
    id 'com.gradleup.shadow' version '8.3.0'
}

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

group = mod_group_id
version = mod_version

configurations.register('universalClasspath') {
    canBeConsumed = false
    canBeResolved = true
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name "JitPack"
        url 'https://jitpack.io'
    }
    maven {
        name "Modrinth"
        url "https://api.modrinth.com/maven"
    }
}

base {
    // Modified by TeaCon
    archivesName = "$mod_github_repo-Universal-$minecraft_version"
}

// Mojang ships Java 21 to end users starting in 1.20.5, so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

dependencies {
    universalClasspath project(path: ':util', configuration: 'utilJar')
    universalClasspath project(path: ':velocity', configuration: 'velocityJar')
    universalClasspath project(path: ':neoforge', configuration: 'neoForgeJar')
    shadow 'com.vdurmont:semver4j:3.1.0'
    shadow 'com.moandjiezana.toml:toml4j:0.7.2'
    shadow 'io.lettuce:lettuce-core:6.2.4.RELEASE'
    shadow 'org.apache.commons:commons-text:1.10.0'
    shadow 'io.prometheus:simpleclient_httpserver:0.16.0'
}

shadowJar {
    archiveClassifier.set(null)
    configurations = [project.configurations.universalClasspath, project.configurations.shadow]
    dependencies {
        it.exclude it.dependency('io.netty:.*')
        it.exclude it.dependency('com.google.code.gson:.*')
    }
    from('LICENSE') {
        into 'META-INF'
    }
    manifest {
        attributes([
                "Specification-Title"     : "Gongdaobei",
                "Specification-Vendor"    : "TeaConMC",
                "Specification-Version"   : "1",
                "Implementation-Title"    : rootProject.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "TeaConMC",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    relocate 'reactor', 'org.teacon.gongdaobei.reactor'
    relocate 'io.lettuce', 'org.teacon.gongdaobei.lettuce'
    relocate 'io.prometheus', 'org.teacon.gongdaobei.prometheus'
    relocate 'org.apache.commons', 'org.teacon.gongdaobei.commons'
    relocate 'com.moandjiezana.toml', 'org.teacon.gongdaobei.toml'
    relocate 'com.vdurmont.semver4j', 'org.teacon.gongdaobei.semver4j'
    relocate 'org.reactivestreams', 'org.teacon.gongdaobei.reactivestreams'

    mergeServiceFiles()
}

jar.enabled = false

artifacts {
    archives shadowJar
}

publishing {
    publications {
        register('release', MavenPublication) {
            // noinspection GroovyAssignabilityCheck
            from components.java
            version = mod_version
            groupId = mod_group_id
            artifactId = "$mod_github_repo-NeoForge-$minecraft_version"
            pom {
                name = mod_github_repo
                url = "https://github.com/$mod_github_owner/$mod_github_repo"
                licenses {
                    license {
                        name = mod_license
                        url = "https://github.com/$mod_github_owner/$mod_github_repo/blob/HEAD/LICENSE"
                    }
                }
                organization {
                    name = 'TeaConMC'
                    url = 'https://github.com/teaconmc'
                }
                developers {
                    for (mod_author in "$mod_authors".split(',')) {
                        developer { id = mod_author.trim(); name = mod_author.trim() }
                    }
                }
                issueManagement {
                    system = 'GitHub Issues'
                    url = "https://github.com/$mod_github_owner/$mod_github_repo/issues"
                }
                scm {
                    url = "https://github.com/$mod_github_owner/$mod_github_repo"
                    connection = "scm:git:git://github.com/$mod_github_owner/${mod_github_repo}.git"
                    developerConnection = "scm:git:git@github.com:$mod_github_owner/${mod_github_repo}.git"
                }
            }
        }
    }
    repositories {
        maven {
            name = "TeaConOSS"
            url = "s3://maven/"
            credentials(AwsCredentials) {
                accessKey = System.env.TEACON_ARCHIVE_ACCESS_KEY
                secretKey = System.env.TEACON_ARCHIVE_ACCESS_SECRET
            }
        }
        maven {
            name = "TeaConGitea"
            url = "https://git.teacon.cn/api/packages/teaconmc/maven"
            credentials(HttpHeaderCredentials) {
                name = "Authorization"
                value = "token " + System.getenv("GITEA_TOKEN")
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }
}
